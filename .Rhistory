}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
print(wj)
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/j
}
print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/j
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j+1]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j-1]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,32,4,5,6)))
fft(c(1,2,32,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum * (n^(-1/2))
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum / sqrt(n)
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum / sqrt(n)
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum / sqrt(n)
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum / sqrt(n)
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum / sqrt(n)
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum / sqrt(n)
print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
outVector[j] = sum / sqrt(n)
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
print(outVector[j])
outVector[j] = sum / sqrt(n)
# print(sum)
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
# print(sum)
print(outVector[j])
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
print(outVector[j])
outVector[j] = sum / sqrt(n)
# print(sum)
print(outVector[j])
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
myDFT = function(vector)
{
n = length(vector)
wj = vector(mode='numeric',length=n)
outVector = vector(mode='numeric',length=n)
for (j in 1:n)
{
wj[j] = (j-1)/n
}
# print(wj)
for (j in 1:n)
{
sum = 0
for (i in 1:n)
{
sum = sum + (vector[i]*exp(-2*pi*1i*wj[j]*i))
}
print(outVector[j])
outVector[j] = sum / sqrt(n)
print(sum)
print(outVector[j])
}
return(outVector)
}
print(myDFT(c(1,2,3,4,5,6)))
fft(c(1,2,3,4,5,6))
install.packages('MASS')
require('MASS')
require(MASS)
require(MAS)
X = matrix(c(1,-1,0,0,0,0,0,1,-1,0,0,1,0,0,-1,1,0,0,0,-1), nrow = 4, ncol = 5)
View(X)
newMat = t(X) %*% X
ginv(newMat)
install.packages('MASS')
install.packages('MASS')
install.packages("MASS")
install.packages('Rtools')
income_data = read.csv("County Income 2021 5-Year ACS Census.csv")
current_file_path = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_file_path)
income_data = read.csv("County Income 2021 5-Year ACS Census.csv")
View(income_data)
income_data$Label..Grouping. = trimws(income_data$Label..Grouping.,whitespace = "[\\h\\v]")
View(income_data)
# install.packages("rstudioapi")
install.packages("readr")
# install.packages("rstudioapi")
install.packages("readr")
install.packages("readr")
library(readr)
income_data2 = read_csv("County Income 2021 5-Year ACS Census.csv")
require(readr)
install.packages("rlang")
install.packages("rlang")
require(readr)
update.packages(ask = FALSE)
require(readr)
install.packages("readr", dependencies = TRUE)
require(readr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
require(readr)
install.packages("readr", dependencies = TRUE)
require(readr)
update.packages(ask = FALSE)
